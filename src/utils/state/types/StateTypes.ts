// State Management Types - Phase 9F Implementation
// Type definitions for centralized state management system

import type { GameState, GameEvent } from '../../../types'

/**
 * Represents a single state change operation
 */
export interface StateChange {
  type?: string          // Optional type identifier for the change
  path: string           // dot notation path like 'resources.energy.current'
  oldValue: any
  newValue: any
  operation?: 'set' | 'add' | 'subtract' | 'multiply' | 'append' | 'remove'
  metadata?: any         // Additional context for the change
}

/**
 * Collection of state changes that should be applied atomically
 */
export interface StateChanges {
  changes: StateChange[]
  reason: string         // Description of why these changes are being made
  source: string         // Which system/action is making the changes
}

/**
 * Result of state validation
 */
export interface ValidationResult {
  isValid: boolean
  errors: string[]
  warnings: string[]
}

/**
 * Events generated by state changes
 */
export interface StateEvent extends GameEvent {
  stateChanges: StateChange[]
}

/**
 * Resource operation types
 */
export type ResourceOperation = 'add' | 'subtract' | 'set' | 'transfer'

/**
 * Resource change request
 */
export interface ResourceChangeRequest {
  type: 'energy' | 'gold' | 'water' | 'seeds' | 'materials'
  operation: ResourceOperation
  amount: number
  itemId?: string        // for seeds/materials
  enforceLimit?: boolean // whether to enforce storage limits
  allowOverflow?: boolean // whether to allow overflow beyond limits
}

/**
 * Result of a resource operation
 */
export interface ResourceChangeResult {
  success: boolean
  actualAmount: number   // actual amount changed (may differ due to limits)
  overflow: number       // amount that couldn't be added due to limits
  newValue: number       // new value after operation
  hitLimit: boolean      // whether a storage limit was reached
  error?: string
}

/**
 * State invariants that must be maintained
 */
export interface StateInvariant {
  name: string
  description: string
  validate: (gameState: GameState) => boolean
  severity: 'error' | 'warning'
}

/**
 * Update modes for state changes
 */
export type UpdateMode = 'immediate' | 'batched' | 'transaction'

/**
 * State update options
 */
export interface UpdateOptions {
  mode: UpdateMode
  validateBefore: boolean
  validateAfter: boolean
  generateEvents: boolean
  allowPartialFailure: boolean
}
